import schedule
import time
from datetime import datetime
from core.report_generator import generer_pdf_journalier
from core.csv_export import exporter_resultats_csv
from notifications.email_alert import envoyer_rapport_email
from notifications.telegram_alert import envoyer_alerte_telegram

def routine_quotidienne():
    try:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        print(f"üìÜ Lancement de la routine quotidienne √† {now}...")

        # 1. G√©n√©rer le PDF quotidien (analyse IA)
        path_pdf = generer_pdf_journalier()

        # 2. Exporter les donn√©es CSV du jour
        path_csv = exporter_resultats_csv()

        # 3. Envoi email avec pi√®ce jointe
        envoyer_rapport_email(path_pdf)

        # 4. Envoi alerte Telegram enrichie
        message = {
            "symbol": "GLOBAL",
            "direction": "Analyse journali√®re",
            "confiance": 100,
            "mise": "-",
            "duree": "-",
            "contexte": "Synth√®se des signaux IA",
            "resume_technique": "üìä Fichier PDF et CSV g√©n√©r√©s avec succ√®s.",
            "resume_fondamentale": f"üìÅ Fichiers envoy√©s √† 18h. V√©rifiez vos emails ou le dossier partag√©."
        }
        envoyer_alerte_telegram(message, "üì© Rapport quotidien IA g√©n√©r√© et transmis")

        print("‚úÖ Routine compl√®te ex√©cut√©e avec succ√®s.")
    except Exception as e:
        print(f"‚ùå Erreur dans la routine quotidienne : {e}")

# ‚è∞ Planification automatique chaque jour √† 18h
schedule.every().day.at("18:00").do(routine_quotidienne)

if __name__ == "__main__":
    print("üïí Attente de l‚Äôex√©cution quotidienne √† 18h (cron actif)...")
    while True:
        schedule.run_pending()
        time.sleep(60)
